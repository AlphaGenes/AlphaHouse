module macsTest
use pFUnit_mod
use macs
implicit none

character(300)::internalMacsFilename, externalMacsFileName

contains

  @before
  subroutine init()

    integer::fileNumber

    write(InternalMacsFileName, "(A)") "testMacsSpecInternal.txt"

    open(fileNumber, file = trim(InternalMacsFileName), action="write")

    write(fileNumber,"(A,A)") "OutputFile, Internal, ", "testFile"
    write(fileNumber,"(A, I0)") "ChromosomeLengthBasesMacs,Internal,  ", 1000000
    write(fileNumber, "(A,I0)") "MutationRateMacs, Internal, ", 10
    write(fileNumber, "(A, I0)") "EffectivePopulationSizeBaseMacs,Internal,  ", 1000
    write(fileNumber, "(A, I0)") "NumberOfHaplotypes, ", 400
    write(fileNumber, "(A, A)") "PopulationHistoryMacs,  ", "InternalCattle"
    write(fileNumber, "(A,A,A)") "ChromosomeLengthMorgansMacs, Internal,", "1.00"

    close(fileNumber)
    write(ExternalMacsFileName, "(A)") "testMacsSpecExternal.txt"

    open(fileNumber, file = trim(ExternalMacsFileName), action="write")

    write(fileNumber,"(A,A)") "OutputFile, External, ", "testFile"
    write(fileNumber,"(A, I0)") "ChromosomeLengthBasesMacs,External,  ", 1000000
    write(fileNumber, "(A,I0)") "MutationRateMacs, External, ", 10
    write(fileNumber, "(A, I0)") "EffectivePopulationSizeBaseMacs,External,  ", 1000
    write(fileNumber, "(A, I0)") "NumberOfHaplotypes,  ", 400
    write(fileNumber, "(A, A)") "PopulationHistoryMacs,  ", "InternalCattle"
    write(fileNumber, "(A,A,A)") "ChromosomeLengthMorgansMacs, External,", "1.00"
    close(fileNumber)
  
  end subroutine init
  
@after
subroutine tearDown()
integer::fileUnit
!open(fileUnit, file = ExternalMacsFileName,status="old")
!close(fileUnit, status="delete")
!open(fileUnit, file = InternalMacsFileName, status="old")
!close(fileUnit, status="delete")

end subroutine tearDown

@test 
subroutine testGetMacsInputExternalFlagMutationRate()
  implicit none
  type(MacsInput)::in

  logical:: expectedMacsValue = .false.

  call getMacsInput(ExternalMacsFileName,in)

  @assertEqual(expectedMacsValue, in%InternalMutationRateMaCS)

end subroutine testGetMacsInputExternalFlagMutationRate

@test 
!subroutine testGetMacsInputExtenalFlagMorgansMacs()
!  implicit none
!  
!  type(MacsInput)::in
!  logical:: expectedMacsValue = .false.
!
!  call getMacsInput(ExternalMacsFileName, in)
!
!  @assertEqual(expectedMacsValue, in%InternalMorgansMacs)
!
!end subroutine testGetMacsInputExtenalFlagMorgansMacs
!
!
!@test 
!subroutine testGetMacsInputExtenalFlagInternalChrLenBasesMaCS()
!  implicit none
!  
!  type(MacsInput)::in
!  logical:: expectedMacsValue = .false.
!
!  call getMacsInput(ExternalMacsFileName, in)
!
!  @assertEqual(expectedMacsValue, in%InternalChrLenBasesMaCS)
!
!end subroutine testGetMacsInputExtenalFlagInternalChrLenBasesMaCS
!
!@test 
!subroutine testGetMacsInputExtenalFlagInternalEffecPopSize()
!  implicit none
!  
!  type(MacsInput)::in
!  logical:: expectedMacsValue = .false.
!
!  call getMacsInput(ExternalMacsFileName, in)
!
!  @assertEqual(expectedMacsValue, in%InternalEffecPopSize)
!
!end subroutine testGetMacsInputExtenalFlagInternalEffecPopSize
!
!@test 
!subroutine testGetMacsInputInternalFlagMutationRate()
!  implicit none
!  
!  type(MacsInput)::in
!  logical:: expectedMacsValue
!  
!  expectedMacsValue = true.
!
!  call getMacsInin%put(InternalMacsFileName, in)
!
!  @assertEqual(expectedMacsValue, InternalMutationRateMaCS)
!
!end subroutine testGetMacsInputInternalFlagMutationRate
!
!@test 
!subroutine testGetMacsInputIntenalFlagMorgansMacs()
!  implicit none
!  
!  type(MacsInput)::in
!  logical:: expectedMacsValue = .true.
!
!  call getMacsInput(InternalMacsFileName, in)
!
!  @assertEqual(expectedMacsValue, in%InternalMorgansMacs)
!
!end subroutine testGetMacsInputIntenalFlagMorgansMacs
!
!
!@test 
!subroutine testGetMacsInputIntenalFlagInternalChrLenBasesMaCS()
!  implicit none
!  
!  type(MacsInput)::in
!  logical:: expectedMacsValue = .true.
!
!  call getMacsInput(InternalMacsFileName, in)
!
!  @assertEqual(expectedMacsValue, in%InternalChrLenBasesMaCS)
!
!end subroutine testGetMacsInputIntenalFlagInternalChrLenBasesMaCS
!
!@test 
!subroutine testGetMacsInputIntenalFlagInternalEffecPopSize()
!  implicit none
!  
!  type(MacsInput)::in
!  logical:: expectedMacsValue = .true.
!
!  call getMacsInput(InternalMacsFileName, in)
!
!  @assertEqual(expectedMacsValue, in%InternalEffecPopSize)
!
!end subroutine testGetMacsInputIntenalFlagInternalEffecPopSize
!
!@test 
!subroutine testGetMacsRecombHotspotsOnOff()
!  implicit none
!  
!  type(MacsInput)::in
!  logical:: expectedMacsValue = .true.
!
!  call getMacsInput(InternalMacsFileName, in)
!
!  @assertEqual(expectedMacsValue, in%RecombHotspotsOnOff)
!
!end subroutine testGetMacsRecombHotspotsOnOff




@test
subroutine testGetMacsInputMutation()
  use macs
  real(kind=8):: expectedValue

    expectedValue = 0

    call getMacsInput("testMacsSpecInternal.txt")

    @assertEqual(expectedValue, MutationRateMaCS)

  end subroutine testGetMacsInputMutation
  
end module macsTest
