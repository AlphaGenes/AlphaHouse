module TestPedigreeModule
  use pFUnit_mod
  use PedigreeModule
  use ISO_Fortran_env

  implicit none

  type(PedigreeHolder) :: pedigree  
  contains

 @before
    subroutine initialise
         implicit none
        
        pedigree = PedigreeHolder("testPed.txt")

        
    end subroutine

   @after
    subroutine Uninit
      call pedigree%destroyPedigree
    end subroutine

    @test
    subroutine testReadAndSort
        implicit none
         @assertEqual(pedigree%Pedigree(1)%OriginalID,"aaa")
    end subroutine testReadAndSort

     @test
    subroutine testDummys
        implicit none
        integer :: tmp,i
        tmp = pedigree%dictionary%getValue("dumd1")
         @assertFalse(tmp == DICT_NULL)
         @assertEqual(2,pedigree%pedigree(tmp)%nOffs)
    end subroutine testDummys



    @test
    subroutine testSorting
      integer :: tmp,tmp2, i 
      call pedigree%sortPedigreeAndOverwrite
       tmp = pedigree%dictionary%getValue("ccc")
       tmp2 = pedigree%dictionary%getValue("aaa")
      @assertEqualUserDefined(pedigree%pedigree(tmp)%sirePointer,pedigree%pedigree(tmp2))
      do i=1, pedigree%pedigree(tmp2)%nOffs
        print *, pedigree%pedigree(tmp2)%Offsprings(i)%p%originalID
      enddo
      @assertEqualUserDefined(pedigree%pedigree(tmp),pedigree%pedigree(tmp2)%Offsprings(1)%p)

    end subroutine testSorting
    ! @test
    ! subroutine testAddOffspring
    !     type(individualPointerContainer), allocatable :: Offsprings(:)
    !     type(Individual) :: tmp
    !     call table(1)%addOffspring(table(2))
    !     @assertEqual(table(1)%GetNumberOffsprings(), 1)
    !     call table(1)%getOffsprings(Offsprings)
    !     tmp = Offsprings(1)%p
    !     @assertEqualUserDefined(tmp, table(2))
    ! end subroutine testAddOffspring

    ! @test
    ! subroutine testBuildOffspring           
    !     call BuildOffspringInfortmation(table)
    !     @assertEqual(table(1)%GetNumberOffsprings(), 1)
    !     @assertEqual(table(2)%GetNumberOffsprings(), 2)
    ! end subroutine testBuildOffspring
end module TestPedigreeModule
