module TestIndividualHelperModule
  use pFUnit_mod
  use PedigreeModule
  use IndividualHelperModule
  use ISO_Fortran_env

  implicit none

  type(PedigreeHolder) :: pedigree
  contains

  @before
    subroutine initialise
        implicit none

        integer(int32) :: pedUnit

        ! A sorted pedigree with one parent (d1) not given as individual
        open(newunit=pedUnit, file="testPed.txt", status="unknown")
        write(pedUnit, "(a)") "aaa 0   0"
        write(pedUnit, "(a)") "bbb 0   0"
        write(pedUnit, "(a)") "ccc aaa bbb"
        write(pedUnit, "(a)") "ddd aaa 0"
        write(pedUnit, "(a)") "eee ddd bbb"
        write(pedUnit, "(a)") "fff ddd bbb"
        write(pedUnit, "(a)") "ggg 0   d1"
        write(pedUnit, "(a)") "hhh 0   d1"
        write(pedUnit, "(a)") "iii fff ccc"
        close(pedUnit)

        pedigree = PedigreeHolder("testPed.txt")

    end subroutine

   @after
    subroutine Uninit
      integer(int32) :: pedUnit
      call pedigree%destroyPedigree
      open(newunit=pedUnit, file="testPed.txt", status="old")
      close(pedUnit, status="delete")
    end subroutine

    @test
    subroutine testGetFullSibs
        use IndividualModule
        implicit none
        type(Individual), pointer :: tmp, tmp2
        type(individualLinkedList) :: ret

        tmp => pedigree%pedigree(pedigree%dictionary%getValue("fff"))
        tmp2 => pedigree%pedigree(pedigree%dictionary%getValue("eee"))
        ret = getFullSibs(tmp)
        @assertEqual(ret%length,1)
        tmp => ret%list_get_nth(1)
        @assertTrue(associated(tmp, tmp2))
    end subroutine testGetFullSibs


        @test
    subroutine testGetHalfSibs
        use IndividualModule
        implicit none
        type(Individual), pointer :: tmp, tmp2
        type(individualLinkedList) :: ret

        tmp => pedigree%pedigree(pedigree%dictionary%getValue("ddd"))
        tmp2 => pedigree%pedigree(pedigree%dictionary%getValue("ccc"))
        ret = getOnlyHalfSibs(tmp)
        @assertEqual(ret%length,1)
        tmp => ret%list_get_nth(1)
        @assertTrue(associated(tmp, tmp2))
    end subroutine testGetHalfSibs


     @test
    subroutine testGetAllSibs
        use IndividualModule
        implicit none
        type(Individual), pointer :: tmp, tmp2,tmp3,tmp4
        type(individualLinkedList) :: ret
        call pedigree%outputSortedPedigree("out.txt")
        tmp => pedigree%pedigree(pedigree%dictionary%getValue("ccc"))
        tmp2 => pedigree%pedigree(pedigree%dictionary%getValue("eee"))
        tmp3 => pedigree%pedigree(pedigree%dictionary%getValue("fff"))
        tmp4 => pedigree%pedigree(pedigree%dictionary%getValue("ddd"))
        ret = getSibs(tmp)
        @assertEqual(ret%length,3)
        @assertTrue(ret%contains(tmp2))
        @assertTrue(ret%contains(tmp3))
        @assertTrue(ret%contains(tmp4))

    end subroutine testGetAllSibs


    @test
    subroutine testGetSharedKids
        use IndividualModule
        implicit none
        type(Individual), pointer :: tmp, tmp2,tmp3,tmp4
        type(individualLinkedList) :: ret
        tmp => pedigree%pedigree(pedigree%dictionary%getValue("ddd"))
        tmp2 => pedigree%pedigree(pedigree%dictionary%getValue("bbb"))
        tmp3 => pedigree%pedigree(pedigree%dictionary%getValue("eee"))
        tmp4 => pedigree%pedigree(pedigree%dictionary%getValue("fff"))
        ret = getSharedKids(tmp,tmp2)
        @assertEqual(ret%length,2)
        @assertTrue(ret%contains(tmp3))
        @assertTrue(ret%contains(tmp4))

    end subroutine testGetSharedKids


        @test
    subroutine testGetMates
        use IndividualModule
        implicit none
        type(Individual), pointer :: tmp, tmp2,tmp3,tmp4
        type(individualLinkedList) :: ret
        tmp => pedigree%pedigree(pedigree%dictionary%getValue("ddd"))
        tmp2 => pedigree%pedigree(pedigree%dictionary%getValue("bbb"))
        tmp3 => pedigree%pedigree(pedigree%dictionary%getValue("aaa"))
        ret = getMates(tmp2)

        @assertEqual(ret%length,2)
        @assertTrue(ret%contains(tmp))
        @assertTrue(ret%contains(tmp3))

    end subroutine testGetMates


          @test
    subroutine TestgetAncestors
        use IndividualModule
        implicit none
        type(Individual), pointer :: check,tmp, tmp2,tmp3,tmp4,tmp5,tmp6
        type(individualLinkedList) :: ret
        check => pedigree%pedigree(pedigree%dictionary%getValue("iii"))
        tmp => pedigree%pedigree(pedigree%dictionary%getValue("ddd"))
        tmp2 => pedigree%pedigree(pedigree%dictionary%getValue("ccc"))
        tmp3 => pedigree%pedigree(pedigree%dictionary%getValue("bbb"))
        tmp4 => pedigree%pedigree(pedigree%dictionary%getValue("fff"))
        tmp5 => pedigree%pedigree(pedigree%dictionary%getValue("aaa"))
        tmp6 => pedigree%pedigree(pedigree%dictionary%getValue("hhh"))
        call getAncestors(check,ret)

        @assertEqual(ret%length,5)
        @assertTrue(ret%contains(tmp))
        @assertTrue(ret%contains(tmp2))
        @assertTrue(ret%contains(tmp3))
        @assertTrue(ret%contains(tmp4))
        @assertTrue(ret%contains(tmp5))
        @assertFalse(ret%contains(tmp6))

    end subroutine TestgetAncestors


end module TestIndividualHelperModule
