module TestPedigreeTable
  use pFUnit_mod
  use IndividualModule
  use ISO_Fortran_env

  implicit none

  integer,parameter :: SIZE = 10
  class(Individual), allocatable :: table(:)

  contains

 @before
    subroutine initialise
         implicit none
        integer :: i, genCount
        character, allocatable:: id

        id = "hi there"
        genCount = 1
        allocate(table(size))
        do i=1,size
            if (i > 2) then
                call table(i)%init(id,i, i-100, i-1, i-2, genCount)
            else
                call table(i)%init(id,i, i-100, 0, 0, genCount)
            endif

            if (mod(i,5) == 0) genCount = genCount+1
        enddo
        
    end subroutine

   @after
    subroutine Uninit
      deallocate(table)
    end subroutine

    @test
    subroutine testFounder
        implicit none
        @assertEqual(table(1)%isFounder(), .true.)
        @assertEqual(table(2)%isFounder(), .true.)
    end subroutine testFounder


    @test
    subroutine testAddOffspring
        type(individualPointerContainer), allocatable :: Offsprings(:)
        type(Individual) :: tmp
        call table(1)%addOffspring(table(2))
        @assertEqual(table(1)%GetNumberOffsprings(), 1)
        call table(1)%getOffsprings(Offsprings)
        tmp = Offsprings(1)%p
        @assertEqualUserDefined(tmp, table(2))
    end subroutine testAddOffspring

    @test
    subroutine testBuildOffspring           
        call BuildOffspringInfortmation(table)
        @assertEqual(table(1)%GetNumberOffsprings(), 1)
        @assertEqual(table(2)%GetNumberOffsprings(), 2)
    end subroutine testBuildOffspring
end module TestPedigreeTable
