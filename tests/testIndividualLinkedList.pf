




module TestIndividualLinkedList
  use pFUnit_mod
  use IndividualLinkedListModule
  use IndividualModule
  use ISO_Fortran_env

  implicit none

  type(IndividualLinkedList) :: ll  
  type(individual), target :: testIndiv1, testIndiv2
  contains

 @before
    subroutine initialise
        
        implicit none
        testIndiv1 = Individual("me","mum","dad",1)
        testIndiv2 = Individual("me2","mum2","dad2",2)
        
    end subroutine

   @after
    subroutine Uninit
      call ll%destroyLinkedList
    end subroutine

    @test
    subroutine testAdd
        implicit none
        call ll%list_add(testIndiv1)

        @assertTrue(associated(ll%first%item, testIndiv1))
        @assertTrue(associated(ll%last%item, testIndiv1))
        ! @assertTrue(associated(ll%make d(1), testIndiv1))
        @assertEqual(ll%length, 1)
    end subroutine testAdd


    @test
    subroutine testDelete
        implicit none

        type(individual), pointer :: tmp


        tmp => testIndiv1
        call ll%list_add(testIndiv1)
        call ll%list_remove(tmp)
        @assertEqual(ll%length, 0)
        @assertFalse(associated(ll%first))
        @assertFalse(associated(ll%last))

        call ll%list_add(testIndiv1)
        call ll%list_add(testIndiv2)
        tmp => testIndiv2
        call ll%list_remove(tmp)
        @assertEqualuserdefined(ll%first%item, testIndiv1)
        @assertEqualuserdefined(ll%last%item, testIndiv1)
    end subroutine testDelete

@test
subroutine testConvertToKnownAnimals()
type(IndividualLinkedList):: LL
type(IndividualLinkedList):: gottenList
type(Individual), dimension(:), allocatable:: expected, gotten
type(Individual):: one, two
integer:: i

one = Individual("OLD", "dad", "mom", 0)
two = Individual("OLD2", "dad", "mom", 0)

one%isUnknownDummy = .true.
two%isUnknownDummy = .false.

call LL%list_add(one)
call LL%list_add(two)


gottenList = LL%convertToListOfKnownAnimals()

allocate(expected(1))
expected(1) = two

gotten = gottenList%convertToArray()

@assertEqual(size(expected), size(gotten)) 

do i = 1, size(expected)
  @assertEqualuserdefined(expected(i), gotten(i))
end do

end subroutine


    @test
    subroutine testPop
        implicit none
        type(individual), pointer ::  tmp
        call ll%list_add(testIndiv1)
        call ll%list_add(testIndiv2)
        call ll%list_pop(tmp)
        @assertTrue(associated(tmp,testIndiv2))

    end subroutine testPop

end module TestIndividualLinkedList
