module testLine
use pFUnit_mod
use LineModule
implicit none

contains
!##################################################################################################################################
! Testing adding Lines together
!##################################################################################################################################
@test
subroutine testAddEmptyLines()
type(Line):: expected, gotten, temp1, temp2

gotten = temp1+temp2

@assertEqualUserDefined(expected, gotten)
end subroutine testAddEmptyLines

@test
subroutine testAddAnEmptyLine()
type(Line):: expected, gotten, temp1

call expected%add("THIS")
call expected%add("IS")
call expected%add("TEST")

gotten = expected+temp1

@assertEqualUserDefined(gotten, expected)

gotten = temp1+expected
@assertEqualUserDefined(gotten, expected)

end subroutine testAddAnEmptyLine

@test
subroutine testAddLines()
type(Line):: expected, gotten
type(Line):: lineOne, lineTwo

call lineOne%add("First")
call lineOne%add("Second")

call lineTwo%add("Third")
call lineTwo%add("Forth")
call expected%add("First")
call expected%add("Second")

call expected%add("Third")
call expected%add("Forth")

gotten = lineOne+lineTwo

@assertEqualUserDefined(expected, gotten)
end subroutine testAddLines

@test
subroutine testPrependForLine()
type(Line):: expected, gotten
integer:: i
do i = 1, 5
  call expected%add("THISGOTTEN")
  call gotten%add("GOTTEN")
end do

call gotten%prepend("THIS")

@assertEqualUserDefined(expected, gotten)

end subroutine testPrependForLine
!##################################################################################################################################
! Test hasWithin
!##################################################################################################################################
@test
subroutine testHasWithinWithOut()
type(Line):: lineUsed
integer:: usedNum, gotten
character(len=:), allocatable:: expected , other
integer::i

other ="Not searched For"
expected = "Searched For"


usedNum = 0
do i =1, 3
  call lineUsed%add(other)
end do
do i =1, 2
  call lineUsed%add(other)
end do

gotten = lineUsed%has(expected)

@assertEqual(usedNum, gotten)
end subroutine testHasWithinWithOut
@test
subroutine testHasWithinWith()
type(Line):: lineUsed
integer:: usedNum, gotten
character(len=:), allocatable:: expected , other
integer::i

other ="Not searched For"
expected = "Searched For"


usedNum = 5
do i =1, usedNum-1
  call lineUsed%add(other)
end do
call lineUsed%add(expected)
do i =1, 2
  call lineUsed%add(other)
end do

gotten = lineUsed%has(expected)

@assertEqual(usedNum, gotten)
end subroutine testHasWithinWith


@test
subroutine testSetWordWithString()
use StringModule
type(Line):: lineUsed
type(String):: expected, gotten


expected = "TEST"

call lineUsed%add("A word")
call lineUsed%setWord(1, expected)

gotten = lineUsed%GetWordAsString(1)

@assertEqualUserDefined(expected, gotten)

end subroutine testSetWordWithString

@test
subroutine testSetWordWithChar()
use StringModule
type(Line):: lineUsed
type(String):: expected, gotten
character(len=5):: Toset

toSet = "This!"

expected = ToSet

call lineUsed%add("A word")
call lineUsed%setWord(1, toSet)

gotten = lineUsed%GetWordAsString(1)

@assertEqualUserDefined(expected, gotten)

end subroutine testSetWordWithChar


@test
subroutine testRemoveAll()
type(Line):: testType
logical:: expected, gotten

call testType%add("A")
call testType%add("B")

call testType%removeAll()

expected = .false.
gotten = allocated(testType%words)

@assertEqual(expected, gotten)
end subroutine testRemoveAll

@test
subroutine testRemoveWordByIndex()
use pFUnit_mod
use lineModule
use AlphaHouseMod, only: int2Char
type(Line):: expected, gotten
integer:: i

allocate(gotten%words(5))
allocate(expected%words(4))

do i = 1, 4
  gotten%words(i) = "test" // int2Char(i)
  expected%words(i) = "test" // int2Char(i)
end do

gotten%words(5) = "ANOTHER"

call gotten%remove(5)

@assertEqualUserDefined(expected, gotten)

end subroutine testRemoveWordByIndex

@test
subroutine testRemoveWordByName()
use pFUnit_mod
use lineModule
use AlphaHouseMod, only: int2Char
type(Line):: expected, gotten
integer:: i

allocate(gotten%words(5))
allocate(expected%words(4))

do i = 1, 4
  gotten%words(i) = "test" // int2Char(i)
  expected%words(i) =  "test" // int2Char(i)
end do

gotten%words(5) = "ANOTHER"

call gotten%remove("ANOTHER")

@assertEqualUserDefined(expected, gotten)

end subroutine testRemoveWordByName

@test
subroutine testAddWordWithChar()
use pFUnit_mod
use lineModule
use AlphaHouseMod, only: int2Char
character(len=5), dimension(5):: char
character(len=5):: newChar
character(len=5), dimension(6):: expected
type(line):: expectedLine, gottenLine
integer::i

do i = 1, 5
  char(i) = "test"//int2Char(i)
end do

newChar = "test6"

expected(1:5) = char
expected(6) = newChar

expectedLine = expected

gottenLine = char
call gottenLine%add(newChar)
@assertEqualUserDefined(expectedLine,gottenLine)

end subroutine testAddWordWithChar

@test
subroutine testAddWordWithString()
use pFUnit_mod
use StringModule
use lineModule
use AlphaHouseMod, only: int2Char
character(len=5), dimension(5):: char
type(String):: newChar
character(len=5), dimension(6):: expected
type(line):: expectedLine, gottenLine
integer::i

do i = 1, 5
  char(i) = "test"//int2Char(i)
end do

newChar = "test6"

expected(1:5) = char
expected(6) = newChar%line

expectedLine = expected

gottenLine = char
call gottenLine%add(newChar)
@assertEqualUserDefined(expectedLine,gottenLine)

end subroutine testAddWordWithString

@test
subroutine testNumWords()
use pfUnit_mod
use lineModule

type(Line):: LineIn
character(len=5), dimension(5):: char
integer:: expectedSize = 5, gotSize

char(1) = "test"
char(2) = "test"
char(3) = "test"
char(4) = "test"
char(5) = "test"


LineIn = char

gotSize = LineIn%getNumWords()

@assertEqual(expectedSize, gotSize)

end subroutine testNumWords

@test
subroutine testGetWordAsString()
use pfUnit_mod
use lineModule
use StringModule

type(Line):: LineIn
character(len=4)::expected
type(String):: expectedString, gotten

expected = "test"
expectedString = expected

LineIn = expected


gotten = lineIn%getWordAsString(1)

@assertEqualUserDefined(expectedString, gotten)
end subroutine testGetWordAsString

@test
subroutine testGetWord()
use pfUnit_mod
use lineModule

type(Line):: LineIn
character(len=4)::expected, gotten

expected = "test"

LineIn = expected

gotten = lineIn%getWord(1)

@assertEqual(expected, gotten)
end subroutine testGetWord
end Module testLine
