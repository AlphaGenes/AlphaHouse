@test
subroutine testAddWord()
use pFUnit_mod
use lineModule
use AlphaHouseMod, only: int2Char
character(len=5), dimension(5):: char
character(len=5):: newChar
character(len=5), dimension(6):: expected
type(line):: expectedLine, gottenLine
integer::i

do i = 1, 5
  char(i) = "test"//int2Char(i)
end do

newChar = "test6"

expected(1:5) = char
expected(6) = newChar

expectedLine = expected

gottenLine = char
call gottenLine%add(newChar)
@assertEqualUserDefined(expectedLine,gottenLine)

end subroutine testAddWord

@test
subroutine testNumWords()
use pfUnit_mod
use lineModule

type(Line):: LineIn
character(len=5), dimension(5):: char
integer:: expectedSize = 5, gotSize

char(1) = "test"
char(2) = "test"
char(3) = "test"
char(4) = "test"
char(5) = "test"


LineIn = char

gotSize = LineIn%getNumWords()

@assertEqual(expectedSize, gotSize)

end subroutine testNumWords

@test
subroutine testGetWordAsString()
use pfUnit_mod
use lineModule
use StringModule

type(Line):: LineIn
character(len=4)::expected
type(String):: expectedString, gotten

expected = "test"
expectedString = expected

LineIn = expected


gotten = lineIn%getWordAsString(1)

@assertEqualUserDefined(expectedString, gotten)
end subroutine testGetWordAsString

@test
subroutine testGetWord()
use pfUnit_mod
use lineModule

type(Line):: LineIn
character(len=4)::expected, gotten

expected = "test"

LineIn = expected

gotten = lineIn%getWord(1)

@assertEqual(expected, gotten)
end subroutine testGetWord
