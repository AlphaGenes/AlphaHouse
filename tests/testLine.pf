module testLine
use pFUnit_mod
use LineModule
implicit none

contains

@test
subroutine testSetWord()
use StringModule
type(Line):: lineUsed
type(String):: expected, gotten
character(len=5):: Toset

toSet = "This!"

expected = ToSet

call lineUsed%add("A word")
call lineUsed%setWord(1, toSet)

gotten = lineUsed%GetWordAsString(1)

@assertEqualUserDefined(expected, gotten)

end subroutine testSetWord


@test
subroutine testRemoveAll()
type(Line):: testType
logical:: expected, gotten

call testType%add("A")
call testType%add("B")

call testType%removeAll()

expected = .false.
gotten = allocated(testType%words)

@assertEqual(expected, gotten)
end subroutine testRemoveAll

@test
subroutine testRemoveWordByIndex()
use pFUnit_mod
use lineModule
use AlphaHouseMod, only: int2Char
type(Line):: expected, gotten
integer:: i

allocate(gotten%words(5))
allocate(expected%words(4))

do i = 1, 4
  gotten%words(i) = "test" // int2Char(i)
  expected%words(i) = "test" // int2Char(i)
end do

gotten%words(5) = "ANOTHER"

call gotten%remove(5)

@assertEqualUserDefined(expected, gotten)

end subroutine testRemoveWordByIndex

@test
subroutine testRemoveWordByName()
use pFUnit_mod
use lineModule
use AlphaHouseMod, only: int2Char
type(Line):: expected, gotten
integer:: i

allocate(gotten%words(5))
allocate(expected%words(4))

do i = 1, 4
  gotten%words(i) = "test" // int2Char(i)
  expected%words(i) =  "test" // int2Char(i)
end do

gotten%words(5) = "ANOTHER"

call gotten%remove("ANOTHER")

@assertEqualUserDefined(expected, gotten)

end subroutine testRemoveWordByName

@test
subroutine testAddWordWithChar()
use pFUnit_mod
use lineModule
use AlphaHouseMod, only: int2Char
character(len=5), dimension(5):: char
character(len=5):: newChar
character(len=5), dimension(6):: expected
type(line):: expectedLine, gottenLine
integer::i

do i = 1, 5
  char(i) = "test"//int2Char(i)
end do

newChar = "test6"

expected(1:5) = char
expected(6) = newChar

expectedLine = expected

gottenLine = char
call gottenLine%add(newChar)
@assertEqualUserDefined(expectedLine,gottenLine)

end subroutine testAddWordWithChar

@test
subroutine testAddWordWithString()
use pFUnit_mod
use StringModule
use lineModule
use AlphaHouseMod, only: int2Char
character(len=5), dimension(5):: char
type(String):: newChar
character(len=5), dimension(6):: expected
type(line):: expectedLine, gottenLine
integer::i

do i = 1, 5
  char(i) = "test"//int2Char(i)
end do

newChar = "test6"

expected(1:5) = char
expected(6) = newChar%line

expectedLine = expected

gottenLine = char
call gottenLine%add(newChar)
@assertEqualUserDefined(expectedLine,gottenLine)

end subroutine testAddWordWithString

@test
subroutine testNumWords()
use pfUnit_mod
use lineModule

type(Line):: LineIn
character(len=5), dimension(5):: char
integer:: expectedSize = 5, gotSize

char(1) = "test"
char(2) = "test"
char(3) = "test"
char(4) = "test"
char(5) = "test"


LineIn = char

gotSize = LineIn%getNumWords()

@assertEqual(expectedSize, gotSize)

end subroutine testNumWords

@test
subroutine testGetWordAsString()
use pfUnit_mod
use lineModule
use StringModule

type(Line):: LineIn
character(len=4)::expected
type(String):: expectedString, gotten

expected = "test"
expectedString = expected

LineIn = expected


gotten = lineIn%getWordAsString(1)

@assertEqualUserDefined(expectedString, gotten)
end subroutine testGetWordAsString

@test
subroutine testGetWord()
use pfUnit_mod
use lineModule

type(Line):: LineIn
character(len=4)::expected, gotten

expected = "test"

LineIn = expected

gotten = lineIn%getWord(1)

@assertEqual(expected, gotten)
end subroutine testGetWord
end Module testLine
