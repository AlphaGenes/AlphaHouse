@test
subroutine TestSampleIntelBernoulliI

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32),dimension(2) :: x

  call IntitialiseIntelRNG

  x=0
  @assertEqual(SampleIntelBernoulliI(    p=0.0d0),x(1:1),"Samples from Bernoulli(p=0) should be 0.")
  @assertEqual(SampleIntelBernoulliI(n=2,p=0.0d0),x,     "Samples from Bernoulli(p=0) should be 0.")

  x=1
  @assertEqual(SampleIntelBernoulliI(    p=1.0d0),x(1:1),"Samples from Bernoulli(p=1) should be 1.")
  @assertEqual(SampleIntelBernoulliI(n=2,p=1.0d0),x,     "Samples from Bernoulli(p=1) should be 1.")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelGammaS

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real32),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGammaS(alpha=1.0,beta=1.0)
  @assertEqual(count(x(1:1) < 0.0),0,"Samples from Gamma should be positive")

  x=SampleIntelGammaS(n=n,alpha=1.0,beta=1.0)
  @assertEqual(count(x < 0.0),0,"Samples from Gamma should be positive")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelGammaD

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real64),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGammaD(alpha=1.0d0,beta=1.0d0)
  @assertEqual(count(x(1:1) < 0.0),0,"Samples from Gamma should be positive")

  x=SampleIntelGammaD(n=n,alpha=1.0d0,beta=1.0d0)
  @assertEqual(count(x < 0.0),0,"Samples from Gamma should be positive")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelGaussS

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real32) :: mean1,mean2,sd1,sd2
  real(real32),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGaussS()
  @assertEqual(count(x(1:1) < -10.0),0,"Samples from Gauss(0,1) should be > -10.0")
  @assertEqual(count(x(1:1) > +10.0),0,"Samples from Gauss(0,1) should be < +10.0")

  x=SampleIntelGaussS(n=n)
  @assertEqual(count(x < -10.0),0,"Samples from Gauss(0,1) should be > -10.0")
  @assertEqual(count(x > +10.0),0,"Samples from Gauss(0,1) should be < +10.0")
  mean1=sum(x)/real(n)
  x(:)=x(:)-mean1
  x(:)=x(:)*x(:)
  sd1=sqrt(sum(x)/real(n))

  x=SampleIntelGaussS(n=n,mu=10.0)
  mean2=sum(x)/real(n)
  @assertTrue(mean1 < mean2,"Mean of samples from Gauss(0,1) should be smaller than the mean of samples from Gauss(10,1)")

  x=SampleIntelGaussS(n=n,sigma2=10.0)
  mean2=sum(x)/real(n)
  x(:)=x(:)-mean2
  x(:)=x(:)*x(:)
  sd2=sqrt(sum(x)/real(n))
  @assertTrue(sd1 < sd2,"Standard deviation of samples from Gauss(0,1) should be smaller than the standard deviation of samples from Gauss(0,10)")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelGaussD

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real64) :: mean1,mean2,sd1,sd2
  real(real64),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGaussD()
  @assertEqual(count(x(1:1) < -10.0),0,"Samples from Gauss(0,1) should be > -10.0")
  @assertEqual(count(x(1:1) > +10.0),0,"Samples from Gauss(0,1) should be < +10.0")

  x=SampleIntelGaussD(n=n)
  @assertEqual(count(x < -10.0),0,"Samples from Gauss(0,1) should be > -10.0")
  @assertEqual(count(x > +10.0),0,"Samples from Gauss(0,1) should be < +10.0")
  mean1=sum(x)/dble(n)
  x(:)=x(:)-mean1
  x(:)=x(:)*x(:)
  sd1=sqrt(sum(x)/dble(n))

  x=SampleIntelGaussD(n=n,mu=10.0d0)
  mean2=sum(x)/dble(n)
  @assertTrue(mean1 < mean2,"Mean of samples from Gauss(0,1) should be smaller than the mean of samples from Gauss(10,1)")

  x=SampleIntelGaussD(n=n,sigma2=10.0d0)
  mean2=sum(x)/dble(n)
  x(:)=x(:)-mean2
  x(:)=x(:)*x(:)
  sd2=sqrt(sum(x)/dble(n))
  @assertTrue(sd1 < sd2,"Standard deviation of samples from Gauss(0,1) should be smaller than the standard deviation of samples from Gauss(0,10)")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelGumbelS

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real32),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGumbelS()
  @assertEqual(count(x(1:1) < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")

  x=SampleIntelGumbelS(n=n)
  @assertEqual(count(x < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")
  @assertEqual(count(x > 100.0),0,"Samples from Gumbel(0,1) should be < 100.0")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelGumbelD

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real64),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGumbelD()
  @assertEqual(count(x(1:1) < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")

  x=SampleIntelGumbelD(n=n)
  @assertEqual(count(x < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")
  @assertEqual(count(x > 100.0),0,"Samples from Gumbel(0,1) should be < 100.0")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelMultinomialI

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n
  integer(int32),allocatable,dimension(:) :: x

  real(real64),allocatable,dimension(:) :: p,pObs

  call IntitialiseIntelRNG

  allocate(p(3))
  allocate(pObs(3))

  n=100
  allocate(x(n))

  p(1)=0.0d0
  p(2)=1.0d0
  p(3)=0.0d0
  x(1:2)=2
  @assertEqual(SampleIntelMultinomialI(    p=p),x(1:1),"Samples from Multinomial(p=(0,1,0)) should be 2.")
  @assertEqual(SampleIntelMultinomialI(n=2,p=p),x(1:2),"Samples from Multinomial(p=(0,1,0)) should be 2.")

  p(1)=0.0d0
  p(2)=0.9d0 ! works even is sum(p) not equal to 1, i.e., p's are taken as relative weights
  p(3)=0.0d0
  x(1:2)=2
  @assertEqual(SampleIntelMultinomialI(    p=p),x(1:1),"Samples from Multinomial(p=(0,1,0)) should be 2.")
  @assertEqual(SampleIntelMultinomialI(n=2,p=p),x(1:2),"Samples from Multinomial(p=(0,1,0)) should be 2.")

  p(1)=0.6d0
  p(2)=0.3d0
  p(3)=0.1d0
  x=SampleIntelMultinomialI(n=n,p=p)
  pObs(1)=count(x == 1)/float(n)
  pObs(2)=count(x == 2)/float(n)
  pObs(3)=count(x == 3)/float(n)
  @assertGreaterThan(pObs(1),pObs(2),"In Multinomial(p=(0.6,0.3,0.1)), Pr(class 1) > Pr(class 2).")
  @assertGreaterThan(pObs(2),pObs(3),"In Multinomial(p=(0.6,0.3,0.1)), Pr(class 2) > Pr(class 3).")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelPoissonI

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n
  integer(int32),allocatable,dimension(:) :: x

  real(real64) :: r

  call IntitialiseIntelRNG

  allocate(x(2))

  x(1:1)=SampleIntelPoissonI()
  @assertEqual(count(x(1:1) >= 0),1,"Samples from Poisson(lambda=1.0) should be >= 0.")

  x=SampleIntelPoissonI(n=2)
  @assertEqual(count(x >= 0),2,"Samples from Poisson(lambda=1.0) should be >= 0.")

  deallocate(x)

  n=100
  allocate(x(n))

  x=SampleIntelPoissonI(n=n)
  r=sum(x)/float(n)
  @assertTrue(r < 2,"Mean of 100 samples from Poisson(lambda=1.0) should be < 2.")

  x=SampleIntelPoissonI(n=n, lambda=10.0d0)
  r=sum(x)/float(n)
  @assertTrue(r >  5,"Mean of 100 samples from Poisson(lambda=10.0) should be >  5.")
  @assertTrue(r < 15,"Mean of 100 samples from Poisson(lambda=10.0) should be < 15.")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelUniformI

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n
  integer(int32),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:2)=0
  @assertEqual(SampleIntelUniformI(    a=0,b=0),x(1:1),"Samples from Uniform(0,0) should be 0.")
  @assertEqual(SampleIntelUniformI(n=2,a=0,b=0),x(1:2),"Samples from Uniform(0,0) should be 0.")

  x=SampleIntelUniformI(n=n,a=5,b=10)
  @assertEqual(count(x <  5),0,"Samples from Uniform(5,10) should be all >=  5.")
  @assertEqual(count(x > 10),0,"Samples from Uniform(5,10) should be all <= 10.")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelUniformS

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real32),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelUniformS()
  @assertEqual(count(x(1:1) <= 1.0),1,"Samples from Uniform(0,1) should be <= 1.")

  x=SampleIntelUniformS(n=n)
  @assertEqual(count(x >= 0.0),n,"Samples from Uniform(0,1) should be >= 0.0")
  @assertEqual(count(x <= 1.0),n,"Samples from Uniform(0,1) should be <= 1.0")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelUniformD

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real64),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelUniformD()
  @assertEqual(count(x(1:1) <= 1.0),1,"Samples from Uniform(0,1) should be <= 1.")

  x=SampleIntelUniformD(n=n)
  @assertEqual(count(x >= 0.0),n,"Samples from Uniform(0,1) should be >= 0.0")
  @assertEqual(count(x <= 1.0),n,"Samples from Uniform(0,1) should be <= 1.0")

  call UnintitialiseIntelRNG

end subroutine
