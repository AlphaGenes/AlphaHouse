@test
subroutine testGetSubStringWithoutStart()
use pFUnit_mod
use StringModule
use iso_fortran_env

Type(String):: stringOut, stringExpected, stringIn
!integer(int32):: expected,gotten
character(len=:), allocatable:: StringUsed
real(real32):: temp
integer(int32):: endPos

StringUsed = "abcdefghijklmnopqrstuvwxyz1234567890!@£$%^&*();:''|\/?><,.~`+="
stringIn = StringUsed

call random_seed()

call random_number(temp)

endPos = (len(StringUsed)-1)*temp+1

stringExpected = StringUsed(1:endPos)

stringOut = stringIn%getSubString(endPos)

@assertEqualUserDefined(stringExpected, stringOut)

end subroutine testGetSubStringWithoutStart

@test
subroutine testGetSubStringWithStart()
use pFUnit_mod
use StringModule
use iso_fortran_env

Type(String):: stringOut, stringExpected, stringIn
!integer(int32):: expected,gotten
character(len=:), allocatable:: StringUsed
real(real32):: temp
integer(int32):: startPos, endPos

StringUsed = "abcdefghijklmnopqrstuvwxyz1234567890!@£$%^&*();:''|\/?><,.~`+="
stringIn = StringUsed

call random_seed()

call random_number(temp)

startPos = (len(StringUsed)-1)*temp+1

call random_number(temp)

endPos = (len(StringUsed)-1)*temp+1

if (startPos>endPos) then
  temp = startPos
  startPos = endPos
  endPos = temp
end if

stringExpected = StringUsed(startPos:endPos)

stringOut = stringIn%getSubString(startPos, endPos)

@assertEqualUserDefined(stringExpected, stringOut)

end subroutine testGetSubStringWithStart



@test
subroutine testGetPosition()
use pFUnit_mod
use StringModule
use iso_fortran_env

Type(String):: stringIn
integer(int32):: expected,gotten
character(len=:), allocatable:: StringUsed
real(real32):: temp

StringUsed = "abcdefghijklmnopqrstuvwxyz1234567890!@£$%^&*();:''|\/?><,.~`+="
StringIn = StringUsed
call random_seed()
call random_number(temp)
expected = len(StringUsed)*temp+1

gotten = stringIn%getPosition(StringUsed(expected:expected))

@assertEqual(expected, gotten)
end subroutine testGetPosition

@test
subroutine testGetSize()
use pfUnit_mod
use stringModule

type(String):: testString
integer:: expectedLength = 4, obtainedLength


testString = "Test"

obtainedLength = testString%GetSize()

@assertEqual(expectedLength, obtainedLength)

end subroutine testGetSize

@test
subroutine testConvertToLowerCase()
use pFUnit_mod
use StringModule

type(String):: input
type(String):: expectedOut

expectedOut="abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz1234567890-!@£$%^&*()_"
input = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890-!@£$%^&*()_"
call input%toLowerCase()

@assertEqualUserDefined(input, expectedOut)

end subroutine testConvertToLowerCase
@test 

subroutine testSplitDefault()
use pFUnit_mod
use stringModule

type(String):: inputString
type(String), dimension(5):: outputString, expectedOutputString

inputString = "  test, test2,,, test3,,,,,,,test4,test5"
expectedOutputString(1) = "  test"
expectedOutputString(2) = " test2"
expectedOutputString(3) = " test3"
expectedOutputString(4) = "test4"
expectedOutputString(5) = "test5"

outputString = inputString%split()

@assertEqualUserDefined(outputString(1), expectedOutputString(1))
@assertEqualUserDefined(outputString(2), expectedOutputString(2))
@assertEqualUserDefined(outputString(3), expectedOutputString(3))
@assertEqualUserDefined(outputString(4), expectedOutputString(4))
@assertEqualUserDefined(outputString(5), expectedOutputString(5))

end subroutine testSplitDefault


@test
subroutine testWithNonDefaults()
use pfUnit_mod
use stringModule
type(String):: inputString
type(String), dimension(5):: outputString, expectedOutputString
character(len=1), dimension(3):: delim

!integer:: i

inputString = "test,test2,    , ,test3,, , ,  , , ,test4,test5"
expectedOutputString(1) = "test"
expectedOutputString(2) = "test2"
expectedOutputString(3) = "test3"
expectedOutputString(4) = "test4"
expectedOutputString(5) = "test5"

delim(1) = ","
delim(2) = " "
delim(3) = char(9)

outputString = inputString%split(delim)

@assertEqualUserDefined(outputString(1), expectedOutputString(1))
@assertEqualUserDefined(outputString(2), expectedOutputString(2))
@assertEqualUserDefined(outputString(3), expectedOutputString(3))
@assertEqualUserDefined(outputString(4), expectedOutputString(4))
@assertEqualUserDefined(outputString(5), expectedOutputString(5))
end subroutine testWithNonDefaults
