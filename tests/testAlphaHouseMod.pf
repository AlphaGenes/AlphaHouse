 module testAlphaHouseMod
 use iso_fortran_env
 use AlphaHouseMod
 use pFUnit_mod
 implicit none

contains
@test
subroutine testint642CharArray()
integer(int64), dimension(5):: intIn
character(2), dimension(5):: expected, gotten

intIn(1) = 1
intIn(2) = 2
intIn(3) = 3
intIn(4) = 4
intIn(5) = 5

expected(1) = " 1"
expected(2) = " 2"
expected(3) = " 3"
expected(4) = " 4"
expected(5) = " 5"

gotten = intToChar(intIn, 2_int64)

@assertEqual(expected(1), gotten(1))
@assertEqual(expected(2), gotten(2))
@assertEqual(expected(3), gotten(3))
@assertEqual(expected(4), gotten(4))
@assertEqual(expected(5), gotten(5))

end subroutine testInt642CharArray

@test
subroutine testint2CharArray()
integer, dimension(5):: intIn
character(2), dimension(5):: expected, gotten

intIn(1) = 1
intIn(2) = 2
intIn(3) = 3
intIn(4) = 4
intIn(5) = 5

expected(1) = " 1"
expected(2) = " 2"
expected(3) = " 3"
expected(4) = " 4"
expected(5) = " 5"

gotten = intToChar(intIn, 2)

write(*,*) gotten
@assertEqual(expected(1), gotten(1))
@assertEqual(expected(2), gotten(2))
@assertEqual(expected(3), gotten(3))
@assertEqual(expected(4), gotten(4))
@assertEqual(expected(5), gotten(5))

end subroutine testInt2CharArray

@test
subroutine testCheckFileExistsWhenFileExists
  use pFUnit_mod

   logical:: fileExists = .true., result
   character(len=:), allocatable:: fileNameToCheck

   fileNameToCheck = "CheckTemp.txt"
   open(unit = 100, file = fileNameToCheck, action = "write", status = "replace")

   result = checkFileExists(fileNameToCheck)
   @assertEqual(fileExists, result)

   close(100, status="delete")
 end subroutine testCheckFileExistsWhenFileExists

 @test
 subroutine testCheckFileExistsWhenFileDoesntExist
 use pFUnit_mod

   logical:: fileExists = .false., result
   character(len=:), allocatable:: fileNameToCheck

   fileNameToCheck = "CheckTemp.txt"

   result = checkFileExists(fileNameToCheck)
   @assertEqual(fileExists, result)

 end subroutine testCheckFileExistsWhenFileDoesntExist

 @test
 subroutine testChar2Double()
 character(len=20):: charIn
 real(real64):: expected, gotten

 call random_number(expected)

 write(charIn, "(f20.16)") expected

 gotten = char2Double(charIn)

 @assertEqual(expected, gotten)

 end subroutine testChar2Double

 @test
 subroutine testChar2Real()
 character(len=20):: charIn
 real(real32):: expected, gotten

 call random_number(expected)

 write(charIn, "(f20.16)") expected

 gotten = char2Real(charIn)

 @assertEqual(expected, gotten, 1e-16)

 end subroutine testChar2Real
 end module testAlphaHouseMod
