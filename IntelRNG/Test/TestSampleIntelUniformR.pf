@test
subroutine TestSampleIntelUniformS()

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real32),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelUniformS()
  @assertEqual(count(x(1:1) <= 1.0),1,"Samples from Uniform(0,1) should be <= 1.")

  x=SampleIntelUniformS(n=n)
  @assertEqual(count(x >= 0.0),n,"Samples from Uniform(0,1) should be >= 0.0")
  @assertEqual(count(x <= 1.0),n,"Samples from Uniform(0,1) should be <= 1.0")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelUniformD()

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real64),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelUniformD()
  @assertEqual(count(x(1:1) <= 1.0),1,"Samples from Uniform(0,1) should be <= 1.")

  x=SampleIntelUniformD(n=n)
  @assertEqual(count(x >= 0.0),n,"Samples from Uniform(0,1) should be >= 0.0")
  @assertEqual(count(x <= 1.0),n,"Samples from Uniform(0,1) should be <= 1.0")

  call UnintitialiseIntelRNG

end subroutine
