@test
subroutine TestSampleIntelMultinomialI()

  use pFUnit_mod
  use IntelRNGMod

  implicit none

  integer(kind=4) :: n
  integer(kind=4),allocatable,dimension(:) :: x

  real(kind=8),allocatable,dimension(:) :: p,pObs

  call IntitialiseIntelRNG

  allocate(p(3))
  allocate(pObs(3))

  n=100
  allocate(x(n))

  p(1)=0.0d0
  p(2)=1.0d0
  p(3)=0.0d0
  x(1:2)=2
  @assertEqual(SampleIntelMultinomialI(    p=p),x(1:1),"Samples from Multinomial(p=(0,1,0)) should be 2.")
  @assertEqual(SampleIntelMultinomialI(n=2,p=p),x(1:2),"Samples from Multinomial(p=(0,1,0)) should be 2.")

  p(1)=0.0d0
  p(2)=0.9d0 ! works even is sum(p) not equal to 1, i.e., p's are taken as relative weights
  p(3)=0.0d0
  x(1:2)=2
  @assertEqual(SampleIntelMultinomialI(    p=p),x(1:1),"Samples from Multinomial(p=(0,1,0)) should be 2.")
  @assertEqual(SampleIntelMultinomialI(n=2,p=p),x(1:2),"Samples from Multinomial(p=(0,1,0)) should be 2.")

  p(1)=0.6d0
  p(2)=0.3d0
  p(3)=0.1d0
  x=SampleIntelMultinomialI(n=n,p=p)
  pObs(1)=count(x == 1)/float(n)
  pObs(2)=count(x == 2)/float(n)
  pObs(3)=count(x == 3)/float(n)
  !print*,pObs
  @assertGreaterThan(pObs(1),pObs(2),"In Multinomial(p=(0.6,0.3,0.1)), Pr(class 1) > Pr(class 2).")
  @assertGreaterThan(pObs(2),pObs(3),"In Multinomial(p=(0.6,0.3,0.1)), Pr(class 2) > Pr(class 3).")

  call UnintitialiseIntelRNG

end subroutine TestSampleIntelMultinomialI
