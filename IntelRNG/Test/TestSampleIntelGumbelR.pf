@test
subroutine TestSampleIntelGumbelRS()

  use pFUnit_mod
  use IntelRNGMod

  implicit none

  integer(kind=4) :: n

  real(kind=4),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGumbelRS()
  @assertEqual(count(x(1:1) < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")

  x=SampleIntelGumbelRS(n=n)
  @assertEqual(count(x < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")
  @assertEqual(count(x > 100.0),0,"Samples from Gumbel(0,1) should be < 100.0")

  call UnintitialiseIntelRNG

end subroutine TestSampleIntelGumbelRS

@test
subroutine TestSampleIntelGumbelRD()

  use pFUnit_mod
  use IntelRNGMod

  implicit none

  integer(kind=4) :: n

  real(kind=8),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGumbelRD()
  @assertEqual(count(x(1:1) < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")

  x=SampleIntelGumbelRD(n=n)
  @assertEqual(count(x < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")
  @assertEqual(count(x > 100.0),0,"Samples from Gumbel(0,1) should be < 100.0")

  call UnintitialiseIntelRNG

end subroutine TestSampleIntelGumbelRD
