@test
subroutine TestSampleIntelGumbelS()

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real32),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGumbelS()
  @assertEqual(count(x(1:1) < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")

  x=SampleIntelGumbelS(n=n)
  @assertEqual(count(x < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")
  @assertEqual(count(x > 100.0),0,"Samples from Gumbel(0,1) should be < 100.0")

  call UnintitialiseIntelRNG

end subroutine

@test
subroutine TestSampleIntelGumbelD()

  use pFUnit_mod
  use IntelRNGMod
  use ISO_Fortran_env

  implicit none

  integer(int32) :: n

  real(real64),allocatable,dimension(:) :: x

  call IntitialiseIntelRNG

  n=100
  allocate(x(n))

  x(1:1)=SampleIntelGumbelD()
  @assertEqual(count(x(1:1) < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")

  x=SampleIntelGumbelD(n=n)
  @assertEqual(count(x < -10.0),0,"Samples from Gumbel(0,1) should be > -10.0")
  @assertEqual(count(x > 100.0),0,"Samples from Gumbel(0,1) should be < 100.0")

  call UnintitialiseIntelRNG

end subroutine
